{
	"MoveResolvers": {
		"prefix": "MoveResolvers",
		"description": "MoveResolvers",
		"scope": "javascript",
		"body": [
			"{",
			"    name: async ({ name, parent }, _args, { apis: { PokeApi } }) => {",
			"      const move = await PokeApi.findMoveByName({ pokemonId: parent, moveName: name })",
			"      return move.name",
			"    },",
			"    pp: async ({ name, parent }, _args, { apis: { PokeApi } }) => {",
			"      const move = await PokeApi.findMoveByName({ pokemonId: parent, moveName: name })",
			"      return move.pp",
			"    },",
			"    power: async ({ name, parent }, _args, { apis: { PokeApi } }) => {",
			"      const move = await PokeApi.findMoveByName({ pokemonId: parent, moveName: name })",
			"      return move.power",
			"    },",
			"    accuracy: async ({ name, parent }, _args, { apis: { PokeApi } }) => {",
			"      const move = await PokeApi.findMoveByName({ pokemonId: parent, moveName: name })",
			"      return move.accuracy",
			"    },",
			"    pokemon: async ({ name }, _args, { apis: { PokeApi } }) => {",
			"      return PokeApi.findPokemonsByMoveName(name)",
			"    }",
			"  }"
		]
	},
	"FindMoveMetaCacheDataloader": {
		"prefix": "FindMoveMetaCacheDataloader",
		"description": "FindMoveMetaCacheDataloader",
		"scope": "javascript",
		"body": [
			"const findMoveMetaByNameDataloader = (context) => new Dataloader(",
			"  async (names) => {",
			"    const { clients: { hyper, pokeClient } } = context",
			"",
			"    const docs = await hyper.cache.query('move-meta-*').then(res => res.docs)",
			"",
			"    const meta = await Promise.all(names.map(async n => {",
			"      const fromCache = docs.find(({ value }) => value.name === n)",
			"",
			"      if (fromCache) {",
			"        return fromCache.value",
			"      }",
			"",
			"      const fromSource = await pokeClient.findMoveByName(n)",
			"      await hyper.cache.set(`move-meta-${fromSource.name}`, fromSource)",
			"      return fromSource",
			"    }))",
			"",
			"    return meta",
			"  }",
			")"
		]
	},
	"PokeApiPrime": {
		"prefix": "PokeApiPrime",
		"description": "PokeApiPrime",
		"scope": "javascript",
		"body": [
			"import { compose, mergeLeft, pick, propEq } from 'ramda'",
			"",
			"class PokeApi {",
			"  constructor (context) {",
			"    this.context = context",
			"  }",
			"",
			"  async listTrainers () {",
			"    const { dataloaders: { findByTypeDataloader } } = this.context",
			"    const trainers = await findByTypeDataloader.load('trainer')",
			"    this.primeTrainerDataloaders(trainers)",
			"    return trainers",
			"  }",
			"",
			"  async findTrainerById (id) {",
			"    const { dataloaders: { findByIdDataloader } } = this.context",
			"    const trainer = await findByIdDataloader.load(id)",
			"    return trainer",
			"  }",
			"",
			"  async listPokemons () {",
			"    const { dataloaders: { findByTypeDataloader } } = this.context",
			"    const pokemons = await findByTypeDataloader.load('pokemon')",
			"    this.primePokemonDataloaders(pokemons)",
			"    return pokemons",
			"  }",
			"",
			"  async findPokemonById (id) {",
			"    const { dataloaders: { findByIdDataloader } } = this.context",
			"    const pokemon = await findByIdDataloader.load(id)",
			"    return pokemon",
			"  }",
			"",
			"  async findPokemonsByTrainerId (trainerId) {",
			"    const { dataloaders: { findByParentDataloader } } = this.context",
			"    const pokemons = await findByParentDataloader.load(trainerId)",
			"    return pokemons",
			"  }",
			"",
			"  async findPokemonsByMoveName (moveName) {",
			"    const { dataloaders: { findPokemonsByMoveNameDataloader } } = this.context",
			"    const pokemons = await findPokemonsByMoveNameDataloader.load(moveName)",
			"    return pokemons",
			"  }",
			"",
			"  async findMovesByPokemonId (id) {",
			"    const pokemon = await this.findPokemonById(id)",
			"",
			"    return Promise.all(",
			"      pokemon.moves.map(async m => ({",
			"        ...await this.findMoveByName({ pokemonId: pokemon._id, moveName: m.name }),",
			"        parent: pokemon._id",
			"      }))",
			"    )",
			"  }",
			"",
			"  async findMoveByName ({ pokemonId, moveName }) {",
			"    const { dataloaders: { findByIdDataloader, findMoveMetaByNameDataloader } } = this.context",
			"",
			"    const [move, moveMeta] = await Promise.all([",
			"      findByIdDataloader.load(pokemonId).then(p => p.moves.find(propEq('name', moveName))),",
			"      findMoveMetaByNameDataloader.load(moveName)",
			"    ])",
			"",
			"    return compose(",
			"      mergeLeft(move),",
			"      pick(['power', 'pp', 'accuracy'])",
			"    )(moveMeta)",
			"  }",
			"",
			"  primeTrainerDataloaders (trainers) {",
			"    const { dataloaders: { findByIdDataloader } } = this.context",
			"    trainers.map(t => findByIdDataloader.prime(t._id, t))",
			"  }",
			"",
			"  primePokemonDataloaders (pokemons) {",
			"    const { dataloaders: { findByIdDataloader } } = this.context",
			"    pokemons.map(p => findByIdDataloader.prime(p._id, p))",
			"  }",
			"}",
			"",
			"export const addApisContext = (context) => {",
			"  const newContext = {",
			"    ...context",
			"  }",
			"",
			"  newContext.apis = {",
			"    PokeApi: new PokeApi(newContext)",
			"  }",
			"",
			"  return newContext",
			"}",
			""
		]
	},
	"PokeApiDataloaders": {
		"prefix": "PokeApiDataloaders",
		"description": "PokeApiDataloaders",
		"scope": "javascript",
		"body": [
			"import { compose, mergeLeft, pick, propEq } from 'ramda'",
			"",
			"class PokeApi {",
			"  constructor (context) {",
			"    this.context = context",
			"  }",
			"",
			"  async listTrainers () {",
			"    const { dataloaders: { findByTypeDataloader } } = this.context",
			"    const trainers = await findByTypeDataloader.load('trainer')",
			"    return trainers",
			"  }",
			"",
			"  async findTrainerById (id) {",
			"    const { dataloaders: { findByIdDataloader } } = this.context",
			"    const trainer = await findByIdDataloader.load(id)",
			"    return trainer",
			"  }",
			"",
			"  async listPokemons () {",
			"    const { dataloaders: { findByTypeDataloader } } = this.context",
			"    const pokemons = await findByTypeDataloader.load('pokemon')",
			"    return pokemons",
			"  }",
			"",
			"  async findPokemonById (id) {",
			"    const { dataloaders: { findByIdDataloader } } = this.context",
			"    const pokemon = await findByIdDataloader.load(id)",
			"    return pokemon",
			"  }",
			"",
			"  async findPokemonsByTrainerId (trainerId) {",
			"    const { dataloaders: { findByParentDataloader } } = this.context",
			"    const pokemons = await findByParentDataloader.load(trainerId)",
			"    return pokemons",
			"  }",
			"",
			"  async findPokemonsByMoveName (moveName) {",
			"    const { dataloaders: { findPokemonsByMoveNameDataloader } } = this.context",
			"    const pokemons = await findPokemonsByMoveNameDataloader.load(moveName)",
			"    return pokemons",
			"  }",
			"",
			"  async findMovesByPokemonId (id) {",
			"    const pokemon = await this.findPokemonById(id)",
			"",
			"    return Promise.all(",
			"      pokemon.moves.map(async m => ({",
			"        ...await this.findMoveByName({ pokemonId: pokemon._id, moveName: m.name }),",
			"        parent: pokemon._id",
			"      }))",
			"    )",
			"  }",
			"",
			"  async findMoveByName ({ pokemonId, moveName }) {",
			"    const { dataloaders: { findByIdDataloader, findMoveMetaByNameDataloader } } = this.context",
			"",
			"    const [move, moveMeta] = await Promise.all([",
			"      findByIdDataloader.load(pokemonId).then(p => p.moves.find(propEq('name', moveName))),",
			"      findMoveMetaByNameDataloader.load(moveName)",
			"    ])",
			"",
			"    return compose(",
			"      mergeLeft(move),",
			"      pick(['power', 'pp', 'accuracy'])",
			"    )(moveMeta)",
			"  }",
			"}",
			"",
			"export const addApisContext = (context) => {",
			"  const newContext = {",
			"    ...context",
			"  }",
			"",
			"  newContext.apis = {",
			"    PokeApi: new PokeApi(newContext)",
			"  }",
			"",
			"  return newContext",
			"}",
			""
		]
	},
	"DataloaderMap": {
		"prefix": "DataloaderMap",
		"description": "DataloaderMap",
		"scope": "javascript",
		"body": [
			"{",
			"    findByIdDataloader: findByIdDataloader(context),",
			"    findMoveMetaByNameDataloader: findMoveMetaByNameDataloader(context),",
			"    findByParentDataloader: findByParentDataloader(context),",
			"    findPokemonsByMoveNameDataloader: findPokemonsByMoveNameDataloader(context),",
			"    findByTypeDataloader: findByTypeDataloader(context)",
			"  }"
		]
	},
	"FindByTypeDataloader": {
		"prefix": "FindByTypeDataloader",
		"description": "FindByTypeDataloader",
		"scope": "javascript",
		"body": [
			"const findByTypeDataloader = (context) => new Dataloader(",
			"  async (types) => {",
			"    const { clients: { hyper } } = context",
			"",
			"    const docs = await hyper.data.query({",
			"      type: { $in: types }",
			"    }).then(res => res.docs)",
			"",
			"    return types.map(type => docs.filter(propEq('type', type)))",
			"  }",
			")"
		]
	},
	"FindPokemonsByMoveNameDataloader": {
		"prefix": "FindPokemonsByMoveNameDataloader",
		"description": "FindPokemonsByMoveNameDataloader",
		"scope": "javascript",
		"body": [
			"const findPokemonsByMoveNameDataloader = (context) => new Dataloader(",
			"  async (names) => {",
			"    const { clients: { hyper } } = context",
			"",
			"    const docs = await hyper.data.query({",
			"      type: 'pokemon',",
			"      moves: {",
			"        $elemMatch: {",
			"          name: { $in: names }",
			"        }",
			"      }",
			"    }).then(res => res.docs)",
			"",
			"    return names.map(name => docs.filter(doc => doc.moves.find(propEq('name', name))))",
			"  }",
			")"
		]
	},
	"FindByParentDataloader": {
		"prefix": "FindByParentDataloader",
		"description": "FindByParentDataloader",
		"scope": "javascript",
		"body": [
			"const findByParentDataloader = (context) => new Dataloader(",
			"  async (parents) => {",
			"    const { clients: { hyper } } = context",
			"",
			"    const docs = await hyper.data.query({",
			"      parent: { $in: parents }",
			"    }).then(res => res.docs)",
			"",
			"    return parents.map(id => docs.filter(propEq('parent', id)))",
			"  }",
			")"
		]
	},
	"FindMoveMetaDataloader": {
		"prefix": "FindMoveMetaDataloader",
		"description": "FindMoveMetaDataloader",
		"scope": "javascript",
		"body": [
			"const findMoveMetaByNameDataloader = (context) => new Dataloader(",
			"  async (names) => {",
			"    const { clients: { pokeClient } } = context",
			"",
			"    const meta = await Promise.all(names.map(n => pokeClient.findMoveByName(n)))",
			"",
			"    return meta",
			"  }",
			")"
		]
	},
	"FindByIdDataloader": {
		"prefix": "FindByIdDataloader",
		"description": "FindByIdDataloader",
		"scope": "javascript",
		"body": [
			"const findByIdDataloader = (context) => new Dataloader(",
			"  async (ids) => {",
			"    const { clients: { hyper } } = context",
			"",
			"    const docs = await hyper.data.query({",
			"      _id: { $in: ids }",
			"    }).then(res => res.docs)",
			"",
			"    return ids.map(id => docs.find(propEq('_id', id)))",
			"  }",
			")"
		]
	},
	"PokemonResolversNoName": {
		"prefix": "PokemonResolversNoName",
		"description": "PokemonResolversNoName",
		"scope": "javascript",
		"body": [
			"moves: async ({ _id }, _args, { apis: { PokeApi } }) => {",
			"      return PokeApi.findMovesByPokemonId(_id)",
			"    },",
			"    trainer: async ({ _id }, _args, { apis: { PokeApi } }) => {",
			"      const pokemon = await PokeApi.findPokemonById(_id)",
			"      return { _id: pokemon.parent }",
			"    }"
		]
	},
	"TrainerResolvers": {
		"prefix": "TrainerResolvers",
		"description": "TrainerResolvers",
		"scope": "javascript",
		"body": [
			"{",
			"    name: async ({ _id }, _args, { apis: { PokeApi } }) => {",
			"      const trainer = await PokeApi.findTrainerById(_id)",
			"      return trainer.name",
			"    },",
			"    pokemon: async ({ _id }, _args, { apis: { PokeApi } }) => {",
			"      const pokemons = await PokeApi.findPokemonsByTrainerId(_id)",
			"      return pokemons",
			"    }",
			"  }"
		]
	},
	"AddTrainer": {
		"prefix": "AddTrainer",
		"description": "AddTrainer",
		"scope": "javascript",
		"body": [
			"p.trainer = await PokeApi.findTrainerById(t._id)"
		]
	}
}